{
  "comments": [
    "Tests covering comparison expressions"
  ],
  "tests": [
    {
      "name": "invalid where predicate - type mismatch",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY DOUBLE KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE ID >= 'not an int' EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Type mismatch in WHERE expression: Cannot compare INPUT.ID (INTEGER) to 'not an int' (STRING)."
      }
    },
    {
      "name": "invalid where predicate - type mismatch complex expression",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE ROWKEY = 'abc' AND ID >= 'not an int' EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Type mismatch in WHERE expression: Cannot compare INPUT.ID (INTEGER) to 'not an int' (STRING)."
      }
    },
    {
      "name": "invalid where predicate - type mismatch join",
      "statements": [
        "CREATE STREAM INPUT_1 (ROWKEY INT KEY, foo INT, bar INT) WITH (kafka_topic='t1', value_format='JSON', KEY='FOO');",
        "CREATE STREAM INPUT_2 (ROWKEY INT KEY, foo INT, bar STRING) WITH (kafka_topic='t2', value_format='JSON', KEY='FOO');",
        "CREATE STREAM OUTPUT AS SELECT I1.BAR, I2.BAR FROM INPUT_1 I1 JOIN INPUT_2 I2 WITHIN 1 MINUTE ON I1.FOO = I2.FOO WHERE I1.BAR > I2.BAR;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Type mismatch in WHERE expression: Cannot compare I1.BAR (INTEGER) to I2.BAR (STRING)."
      }
    },
    {
      "name": "invalid where predicate - string literal",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY DOUBLE KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE 'not a boolean' EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Type error in WHERE expression: Should evaluate to boolean but is 'not a boolean' (STRING) instead."
      }
    },
    {
      "name": "invalid where predicate - double expression",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY DOUBLE KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE RANDOM() + 1.5 EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Type error in WHERE expression: Should evaluate to boolean but is (RANDOM() + 1.5) (DOUBLE) instead."
      }
    },
    {
      "name": "invalid where predicate - illegal expression",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY DOUBLE KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE TRUE + 1.5 EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Unsupported arithmetic types. BOOLEAN DECIMAL"
      }
    }
  ]
}